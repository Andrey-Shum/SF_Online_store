"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
import logging
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-^59az$jrw9+8oqa)gt0_3$lw^g$k8l4*jfh#ea^2eytigle#-4' # noqa

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'modeltranslation',  # обязательно впишите его перед админом для переводов
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',

    'simpleapp.apps.SimpleappConfig',
    'django_filters',
    # В данный раздел добавьте 3 обязательных приложения allauth
    # и одно, которое отвечает за выход через Yandex.
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.yandex',
    # Выполнение задач по расписанию
    "django_apscheduler"
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',

    'django.middleware.locale.LocaleMiddleware',   # Подключить для Локализации

    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'basic.middlewares.TimezoneMiddleware',  # для обработки часовых поясов.

    # AccountMiddleware действует как связующее звено между
    # процессом обработки запросов Django, системой сессий, аутентификацией и
    # перенаправлениями, это ключевой элемент для работы 'django-allauth'.
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    'allauth.account.middleware.AccountMiddleware'
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # `allauth` обязательно нужен этот процессор
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'

# Если не прописать список будет выдавать языки даже на которые не переводится
LANGUAGES = [
    ('en-us', 'English'),
    ('ru', 'Русский')
]

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'postgres',
#         'USER': 'postgres',
#         'PASSWORD': 'postgres',
#         'HOST': '127.0.0.1',
#         'PORT': '5432',
#     },
# }

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', # noqa
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', # noqa
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', # noqa
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', # noqa
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale')  # Папка для хранения переводов
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

SITE_ID = 1

STATICFILES_DIRS = [
    BASE_DIR / "static"
]

# Настроим проект так, чтобы после входа нас перенаправляло на список товаров.
# Для этого в настройках можно указать путь в переменной LOGIN_REDIRECT_URL.
LOGIN_REDIRECT_URL = "/products"
# Настроим проект так, чтобы после выхода нас перенаправляло на список товаров.
LOGOUT_REDIRECT_URL = '/products/'

# Этого раздела может не быть, добавьте его в указанном виде.
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]
# Первые два параметра указывают на то, что поле email является обязательным
# и уникальным.
# Третий, наоборот, — говорит, что username необязательный.
# Следующий параметр указывает,
# что аутентификация будет происходить посредством электронной почты.
# Напоследок мы указываем, что верификация почты отсутствует. Обычно на почту
# отправляется подтверждение аккаунта, после подтверждения которого
# восстанавливается полная функциональность учётной записи.
# Для тестового примера нам необязательно это делать.
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
# Чтобы allauth распознал нашу форму как ту,
# что должна выполняться вместо формы по умолчанию, необходимо добавить.
ACCOUNT_FORMS = {"signup": "accounts.forms.CustomSignupForm"}

# Блок кода настроек нашего проекта работы с Yandex-почтой
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# класс отправителя сообщений (у нас установлено значение по умолчанию,
# а значит, эта строчка необязательна)
EMAIL_HOST = 'smtp.yandex.ru'
# Хост почтового сервера - это адрес или доменное имя сервера, который
# обрабатывает и отправляет электронную почту.
# Хост почтового сервера может быть использован как для отправки,
# так и для получения почты
EMAIL_PORT = 465
"""
Порт, на который почтовый сервер принимает письма, называется почтовым портом. 
Один из самых распространенных почтовых портов - это порт 25, который 
используется для передачи электронной почты 
по протоколу SMTP (Simple Mail Transfer Protocol). 
Однако, существуют и другие почтовые порты, 
такие как порт 587, который используется для SMTP 
с шифрованием TLS (Transport Layer Security), 
и порт 465, который используется для SMTP 
с шифрованием SSL (Secure Sockets Layer). 
Использование конкретного почтового порта зависит от настроек и 
требований почтового сервера.
"""
EMAIL_HOST_USER = "AndreyTestSF"
# логин пользователя почтового сервера
EMAIL_HOST_PASSWORD = "zuqvkobqbkixymje"
# пароль пользователя почтового сервера
EMAIL_USE_TLS = False
# необходимость использования TLS
# (зависит от почтового сервера, смотрите документацию по настройке работы
# с сервером по SMTP)
EMAIL_USE_SSL = True
# необходимость использования SSL
# (зависит от почтового сервера, смотрите документацию по настройке работы
# с сервером по SMTP)

DEFAULT_FROM_EMAIL = "AndreyTestSF@yandex.ru"
# Почтовый адрес отправителя по умолчанию
# Последняя строчка будет использоваться как значение по умолчанию для
# поля from в письме.
# То есть будет отображаться в поле «отправитель» у получателя письма.

SERVER_EMAIL = "AndreyTestSF@yandex.ru"
# SERVER_EMAIL содержит адрес почты, от имени которой будет отправляться письмо
# при вызове mail_admins и mail_manager.
# А переменная MANAGERS будет хранить список имён менеджеров и адресов
# их почтовых ящиков.
MANAGERS = (
    ('Ivan', 'ivan@yandex.ru'),
    ('Petr', 'petr@yandex.ru'),
)

# Сельдерей
CELERY_BROKER_URL = 'redis://localhost:6379'
# Указывает на URL брокера сообщений (Redis).
# По умолчанию он находится на порту 6379.
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
# указывает на хранилище результатов выполнения задач.
CELERY_ACCEPT_CONTENT = ['application/json']  # допустимый формат данных.
CELERY_TASK_SERIALIZER = 'json'  # метод сериализации задач.
CELERY_RESULT_SERIALIZER = 'json'  # метод сериализации результатов.

# Кеш
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'),
        # Указываем, куда будем сохранять кэшируемые файлы!
        # Не забываем создать папку cache_files внутри папки с manage.py!
    }
}

logger = logging.getLogger('project.app.some_name')

LOGGING = {
    'version': 1,  # всегда определяется как 1
    'disable_existing_loggers': False,  # контролирует работу существующей
    # (стандартной) схемы логирования Django
    'style': '{',
    'formatters': {  # formatters - В данном случае это уровень логирования сообщения и само сообщение.
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
        'verbose': { # указывается уровень логирования, время возникновения сообщения,
            # модуль-источник сообщения, само сообщение, а также процесс и поток, в которых оно возникло
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {  # В handlers можно обнаружить два обработчика.
        'console': {  # Первый отправляет сообщения INFO  выше в консоль. Кроме того, накладывается фильтр, определенный выше.
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'mail_admins': {  # Второй обработчик передает сообщения уровня ERROR на отправление по почте.
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {  # определяется два регистратора
        'django': {  # отправляет все сообщения на консоль (указывается handler 'console', определенный выше)
            'handlers': ['console'],
            'propagate': True,
        },
        'django.request': {  # передает все сообщения уровня ERROR в обработчик mail_admins
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        }
    }
}
